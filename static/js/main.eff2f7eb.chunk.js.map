{"version":3,"sources":["assets/images/dexHeader.png","assets/images/pokeball.png","Components/TypeBadge/TypeBadge.js","Components/PokeItem/PokeItem.js","Components/helpers/formatter.js","Components/API/api.js","Components/LoadingSpinner/LoadingSpinner.js","Components/UI/Button/Button.js","Components/Dex/Dex.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","types","reset","normal","fighting","flying","poison","ground","rock","bug","ghost","steel","fire","water","grass","electric","psychic","ice","dragon","dark","fairy","TypeBade","type","showAll","onClick","returnValue","push","key","style","background","className","allTypes","returnSingle","PokeItem","name","img","id","backgroundPosition","num","places","numString","toString","i","length","appendZeros","str","splitStr","toLowerCase","split","charAt","toUpperCase","substring","join","titleCase","getPokemon","offset","fetch","then","result","json","pokemon","promises","map","poke","res","data","sprites","front_default","Promise","all","getPokemonDetails","results","LoadingSpinner","src","pokeBall","Button","children","Dex","state","displayedPokemon","searchValue","loading","inputChangedHandler","event","input","target","value","setState","filter","filterByType","loadMoreClickedHandler","determineTypeFilters","this","dexHeader","alt","placeholder","onChange","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.eff2f7eb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/dexHeader.64044bda.png\";","module.exports = __webpack_public_path__ + \"static/media/pokeball.09a6ae93.png\";","import React from \"react\";\nimport \"./TypeBadge.scss\";\n\nconst types = {\n  reset: \"white\",\n  normal: \"#e0d4b1\",\n  fighting: \"#ff412b\",\n  flying: \"#e49cff\",\n  poison: \"#c730ff\",\n  ground: \"#c7a156\",\n  rock: \"#b5b4b3\",\n  bug: \"#9cba72\",\n  ghost: \"#a372ba\",\n  steel: \"#ababab\",\n  fire: \"#ff9f40\",\n  water: \"#3dc6fc\",\n  grass: \"#46e84e\",\n  electric: \"#f8ff3b\",\n  psychic: \"#ff9efd\",\n  ice: \"#9bf8fa\",\n  dragon: \"#932eff\",\n  dark: \"#8a6958\",\n  fairy: \"#feb0ff\",\n  \"???\": \"#4c8c6d\"\n};\n\nexport default function TypeBade({ type, showAll, onClick }) {\n  function allTypes() {\n    let returnValue = [];\n\n    if (showAll) {\n      for (let type in types) {\n        returnValue.push(\n          <div\n            key={type}\n            style={{ background: types[type] }}\n            className=\"pokeItem-type\"\n            onClick={() => onClick(type)}\n          >\n            {type}\n          </div>\n        );\n      }\n    }\n\n    return returnValue;\n  }\n  function returnSingle(type) {\n    return (\n      <span style={{ background: types[type] }} className=\"pokeItem-type\">\n        {type}\n      </span>\n    );\n  }\n\n  return <>{showAll ? allTypes() : returnSingle(type)}</>;\n}\n","import React from \"react\";\nimport \"./PokeItem.scss\";\nimport { titleCase, appendZeros } from \"../helpers/formatter\";\nimport TypeBadge from \"../TypeBadge/TypeBadge\";\n\nexport default function PokeItem({ name, img, id, type }) {\n  return (\n    <div className=\"pokeItem-wrapper\">\n      <div className=\"pokeItem-content\">\n        <div\n          className=\"pokeItem-img\"\n          style={{\n            background: `url(${img})`,\n            backgroundPosition: \"center\"\n          }}\n        ></div>\n        <div className=\"pokeItem\">\n          {appendZeros(id, 3)} {titleCase(name)}\n        </div>\n        <TypeBadge type={type} />\n      </div>\n    </div>\n  );\n}\n","export function titleCase(str) {\n  var splitStr = str.toLowerCase().split(\" \");\n  for (var i = 0; i < splitStr.length; i++) {\n    // You do not need to check if i is larger than splitStr length, as your for does that for you\n    // Assign it back to the array\n    splitStr[i] =\n      splitStr[i].charAt(0).toUpperCase() + splitStr[i].substring(1);\n  }\n  // Directly return the joined string\n  return splitStr.join(\" \");\n}\n\nexport function appendZeros(num, places) {\n  let numString = num.toString();\n\n  for (let i = 0; i <= places - numString.length; i++) {\n    numString = \"0\" + numString;\n  }\n\n  return numString;\n}\n","export default function getPokemon(offset) {\n  return fetch(`https://pokeapi.co/api/v2/pokemon?limit=20&offset=${offset}`)\n    .then((result) => result.json())\n    .then(({ results }) => getPokemonDetails(results));\n}\n\nexport function getPokemonDetails(pokemon) {\n  let promises = pokemon.map((poke) => {\n    return fetch(`https://pokeapi.co/api/v2/pokemon/${poke.name}`)\n      .then((res) => res.json())\n      .then((data) => {\n        return {\n          name: data.name,\n          type: data.types[0].type.name,\n          img: data.sprites.front_default,\n          id: data.id\n          // data: data\n        };\n      });\n  });\n  return Promise.all(promises);\n}\n","import React from \"react\";\nimport \"./LoadingSpinner.scss\";\nimport pokeBall from \"../../assets/images/pokeball.png\";\n\nexport default function LoadingSpinner() {\n  return (\n    <div className=\"spinner-wrapper\">\n      <img src={pokeBall}></img>\n      Loading...\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./Button.scss\";\n\nexport default function Button({ children, onClick }) {\n  return (\n    <button className=\"btn u-m-a\" onClick={onClick}>\n      {children}\n    </button>\n  );\n}\n","import React, { Component } from \"react\";\nimport \"./Dex.scss\";\nimport PokeItem from \"../PokeItem/PokeItem\";\nimport dexHeader from \"../../assets/images/dexHeader.png\";\nimport getPokemon from \"../API/api\";\nimport LoadingSpinner from \"../LoadingSpinner/LoadingSpinner\";\nimport Button from \"../UI/Button/Button\";\nimport TypeBadge from \"../TypeBadge/TypeBadge\";\n\nexport default class Dex extends Component {\n  state = {\n    pokemon: [],\n    displayedPokemon: [],\n    searchValue: \"\",\n    offset: 0,\n    loading: false\n  };\n\n  componentDidMount() {\n    this.getPokemon();\n  }\n\n  inputChangedHandler = (event) => {\n    let input = event.target.value;\n    this.setState({\n      searchValue: input,\n      displayedPokemon: input\n        ? this.state.pokemon.filter(\n            (poke) => poke.name.toLowerCase() === input.toLowerCase()\n          )\n        : this.state.pokemon\n    });\n  };\n\n  filterByType = (type) => {\n    this.setState({\n      displayedPokemon:\n        type === \"reset\"\n          ? this.state.pokemon\n          : this.state.pokemon.filter((poke) => poke.type === type)\n    });\n  };\n\n  loadMoreClickedHandler = () => {\n    if (!this.state.loading) {\n      this.setState({ loading: true }, () => {\n        this.getPokemon();\n      });\n    }\n  };\n\n  getPokemon = () => {\n    getPokemon(this.state.offset).then((data) =>\n      this.setState(\n        {\n          pokemon: [...this.state.pokemon, ...data],\n          displayedPokemon: [...this.state.pokemon, ...data],\n          offset: this.state.offset + data.length\n        },\n        () => this.setState({ loading: false })\n      )\n    );\n  };\n\n  determineTypeFilters = () => {};\n  render() {\n    return (\n      <div className=\"dex-wrapper\">\n        <div className=\"dex-header\">\n          <img src={dexHeader} alt=\"header\" />\n        </div>\n        <div className=\"dex-content\">\n          <div className=\"search-wrapper\">\n            <div>\n              <input\n                value={this.state.searchValue}\n                type=\"text\"\n                placeholder=\"Search...\"\n                onChange={this.inputChangedHandler}\n              />\n            </div>\n          </div>\n          <div className=\"typeBadges-wrapper\">\n            <TypeBadge showAll={true} onClick={this.filterByType} />\n          </div>\n\n          {this.state.displayedPokemon.map((poke) => {\n            return (\n              <PokeItem\n                key={poke.id}\n                id={poke.id}\n                name={poke.name}\n                img={poke.img}\n                type={poke.type}\n              />\n            );\n          })}\n          {this.state.loading && <LoadingSpinner />}\n          <Button className=\"u-m-a\" onClick={this.loadMoreClickedHandler}>\n            Load More\n          </Button>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./App.scss\";\nimport Dex from \"./Components/Dex/Dex\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>PokeDex</h1>\n      <Dex />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}